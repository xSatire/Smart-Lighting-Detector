// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  accounts      Account[]

  lights Lights[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Lights {
  lightsId      String  @id @unique @default(cuid())
  name          String  @default("Unnamed Light")
  lightsGroupId String
  lightsRegion  String
  status        Boolean @default(false)

  group Group @relation(fields: [lightsGroupId], references: [groupId], onDelete: Cascade)
  user  User  @relation(fields: [lightsId], references: [id], onDelete: Cascade)
}

model Group {
  groupId   String   @id @default(cuid())
  groupName String   @default("Unnamed Group")
  lights    Lights[]

  regionId String
  region   Region @relation(fields: [regionId], references: [id], onDelete: Cascade)
}

model Region {
  id         String @id @default(cuid())
  regionName String @default("Unnamed Region")

  group Group[]
}
